import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class StudentDataJDBC extends JFrame {

    private JTextField txtStudentName;
    private JTextField txtStudentID;
    private JTextField txtCourse;
    private JTextField txtAge;

    // Database credentials â€” update accordingly
    private final String DB_URL = "jdbc:mysql://localhost:3306/your_database_name";
    private final String DB_USER = "your_username";
    private final String DB_PASSWORD = "your_password";

    public StudentDataJDBC() {
        setTitle("Student Data Entry with JDBC");
        setSize(500, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel(new GridLayout(6, 2, 10, 10));

        panel.add(new JLabel("Student Name:"));
        txtStudentName = new JTextField();
        panel.add(txtStudentName);

        panel.add(new JLabel("Student ID:"));
        txtStudentID = new JTextField();
        panel.add(txtStudentID);

        panel.add(new JLabel("Course:"));
        txtCourse = new JTextField();
        panel.add(txtCourse);

        panel.add(new JLabel("Age:"));
        txtAge = new JTextField();
        panel.add(txtAge);

        JButton btnInsert = new JButton("Insert Student");
        panel.add(btnInsert);

        JButton btnDisplay = new JButton("Display Students in Console");
        panel.add(btnDisplay);

        add(panel);

        btnInsert.addActionListener(e -> insertStudentData());
        btnDisplay.addActionListener(e -> displayStudentsInConsole());
    }

    private void insertStudentData() {
        String name = txtStudentName.getText().trim();
        String studentId = txtStudentID.getText().trim();
        String course = txtCourse.getText().trim();
        String ageText = txtAge.getText().trim();

        if (name.isEmpty() || studentId.isEmpty() || course.isEmpty() || ageText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill all fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int age;
        try {
            age = Integer.parseInt(ageText);
            if (age <= 0) throw new NumberFormatException();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Age must be a positive integer.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String sql = "INSERT INTO students (student_name, student_id, course, age) VALUES (?, ?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, name);
            stmt.setString(2, studentId);
            stmt.setString(3, course);
            stmt.setInt(4, age);

            int rowsInserted = stmt.executeUpdate();
            if (rowsInserted > 0) {
                JOptionPane.showMessageDialog(this, "Student data inserted successfully.");
                clearFields();
            } else {
                JOptionPane.showMessageDialog(this, "Insert failed.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database error:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void displayStudentsInConsole() {
        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String sql = "SELECT * FROM students";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            System.out.println("------- Students Data -------");
            System.out.printf("%-5s %-20s %-15s %-20s %-5s%n", "ID", "Student Name", "Student ID", "Course", "Age");
            System.out.println("---------------------------------------------------------------");

            while (rs.next()) {
                int id = rs.getInt("id");
                String name = rs.getString("student_name");
                String studentId = rs.getString("student_id");
                String course = rs.getString("course");
                int age = rs.getInt("age");

                System.out.printf("%-5d %-20s %-15s %-20s %-5d%n", id, name, studentId, course, age);
            }
            System.out.println("-----------------------------");
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Database error while fetching data:\n" + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void clearFields() {
        txtStudentName.setText("");
        txtStudentID.setText("");
        txtCourse.setText("");
        txtAge.setText("");
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            StudentDataJDBC frame = new StudentDataJDBC();
            frame.setVisible(true);
        });
    }
}
